<?php

/**
 * Implements hook_menu().
 */
function ebay_partner_network_menu() {
  $items['admin/config/system/ebay_partner_network'] = array(
    'title' => 'Ebay Partner Network Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ebay_partner_network_admin_settings'),
    'access arguments' => array('administer ebay partner network settings'),
    'file' => 'ebay_partner_network.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function ebay_partner_network_permission() {
  return array(
    'administer ebay partner network settings' => array(
      'title' => t('Administer Ebay Partner Network Settings'),
      'description' => t('Administer Ebay Partner Network Settings.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function ebay_partner_network_block_info() {
  $blocks['pn_related_ebay_items'] = array(
    'info' => t('Related ebay items.'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ebay_partner_network_block_view($delta = '') {

  $block = array();

  switch ($delta) {
    case 'pn_related_ebay_items':
      $app_id = variable_get('ebay_partner_network_app_id', '');
      if(!empty($app_id)) {
        $settings = array(
          'app_id' => $app_id,
          'items_num' => variable_get('ebay_partner_network_items_num', 5),
          'store_id' => variable_get('ebay_partner_network_store_id', 'EBAY-GB'),
          'campaign_id' => variable_get('ebay_partner_network_campaign_id', ''),
          'network_id' => variable_get('ebay_partner_network_network_id', 9),
          'custom_id' => variable_get('ebay_partner_network_custom_id', ''),
        );

        $settings['keyword'] = ebay_partner_network_get_kw();
        $settings['category'] = ebay_partner_network_get_category();
        $settings['custom_params'] = ebay_partner_network_get_custom_params();

        $block['content'] = array(
          '#theme' => array('ebay_partner_network_block'),
          '#attached' => array(
            'js' => array(
               drupal_get_path('module', 'ebay_partner_network') . '/js/ebay.js',
               array('data' => array('ebay_partner_network' => $settings), 'type' => 'setting'),
            )
          )
        );
        $block['subject'] = t('Related Ebay Items');
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function ebay_partner_network_theme($existing, $type, $theme, $path) {
  return array(
    'ebay_partner_network_block' => array(
      'template' => 'ebay_partner_network_block',
      'path' => drupal_get_path('module', 'ebay_partner_network') . '/theme',
    ),
  );
}

/**
 * Returns a keyword to perform a search on eBay.
 * @return string
 */
function ebay_partner_network_get_kw() {
  $kw = '';

  $menu_object = menu_get_object();
  if (!empty($menu_object->title)) {
    $kw = $menu_object->title;
  }
  drupal_alter('ebay_partner_network_keyword', $kw);

  return $kw;
}

/**
 * Returns a category ID where eBay search will be performed.
 * @return int
 */
function ebay_partner_network_get_category() {
  $category = '';
  drupal_alter('ebay_partner_network_category', $category);
  $category = empty($category) ? variable_get('ebay_partner_network_default_category', -1) : $category;
  return $category;
}

/**
 * Get Category List from Ebay
 * @param unknown_type $app_id
 */
function ebay_partner_network_get_categories($app_id) {
  $cached = cache_get('ebay_partner_network:categories');
  $categories = empty($cached->data) ? '' : $cached->data;

  //loading the default category set
  if(!$categories) {
    $params = array();
    $site = variable_get('ebay_partner_network_store_id', 'EBAY-GB');
    $params['site_id'] = ebay_partner_network_site_ids($site);
    $params['app_id'] = $app_id;
    $params['max_depth'] = 0;
    $params['ids'] = array();
    $categories = ebay_partner_build_category_tree('-1', $params, $depth=0);
  }
  /*$categories = array();
  if(!empty($params['site_id'])) {
    $url = 'http://open.api.ebay.com/Shopping?callname=GetCategoryInfo&appid=' . $params['app_id'] . '&siteid=' . $params['site_id'] . '&CategoryID=-1&version=729&IncludeSelector=ChildCategories';
    $cat_list = file_get_contents($url);
    $xml = simplexml_load_string($cat_list);
    if(!empty($xml->CategoryArray->Category)) {
      foreach ($xml->CategoryArray->Category as $cat) {
        $categories[(string)$cat->CategoryID] = (string)$cat->CategoryName;
      }
    }
  }*/
  return $categories;
}

function ebay_partner_network_options_list($field, $instance, $entity_type, $entity) {
  $options = array();
  $app_id = variable_get('ebay_partner_network_app_id','');
  if(!empty($app_id)) {
    $options = ebay_partner_network_get_categories($app_id);
  }
  return $options;
}

/**
 * Implements hook_field_info().
 */
function ebay_partner_network_field_info() {
  return array(
    'ebay_category' => array(
      'label' => t('Ebay Category'),
      'description' => t('Ebay Category.'),
      'settings' => array('max_length' => 255),
      'instance_settings' => array(
        'text_processing' => 0,
      ),
      'default_widget' => 'options_select',
      'default_formatter' => 'states_field_options',
    ),
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function ebay_partner_network_field_widget_info_alter(&$info) {
  $widgets = array(
    'options_select' => array('ebay_category'),
  );
  foreach ($widgets as $widget => $field_types) {
    $info[$widget]['field types'] = array_merge($info[$widget]['field types'], $field_types);
  }
}

/**
 * Implements hook_field_is_empty().
 */
function ebay_partner_network_field_is_empty($item, $field) {
  return false;
}

/**
 * Returns all fields which have a type of 'ebay_category'
 */
function ebay_partner_network_category_fields() {
  $cache_bin = 'cache_field';
  $cache_key = 'field_info:ebay_partner_categories';
  if ($cache = cache_get($cache_key, $cache_bin)) {
    $category_fields = $cache->data;
  }
  else {
    $category_fields = field_read_fields(array('type' => 'ebay_category'));
    if(!empty($category_fields)) {
      cache_set($cache_key, $category_fields, $cache_bin);
    }
  }
 return $category_fields;
}

/**
 * Returns site_id by name.
 */
function ebay_partner_network_site_ids($site = null) {
  $sites = array(
    'EBAY-US' => 0,
    'EBAY-ENCA' => 2,
    'EBAY-GB' => 3,
    'EBAY-AU' => 15,
    'EBAY-AT' => 16,
    'EBAY-FRBE' => 23,
    'EBAY-FR' => 71,
    'EBAY-DE' => 77,
    'EBAY-MOTOR' => 100,
    'EBAY-IT' => 101,
    'EBAY-NLBE' => 123,
    'EBAY-NL' => 146,
    'EBAY-ES' => 186,
    'EBAY-CH' => 193,
    'EBAY-HK' => 201,
    'EBAY-IN' => 203,
    'EBAY-IE' => 205,
    'EBAY-MY' => 207,
    'EBAY-FRCA' => 210,
    'EBAY-PH' => 211,
    'EBAY-PL' => 212,
    'EBAY-SG' => 216
  );
  return (!empty($site) && !empty($sites[$site])) ? $sites[$site] : $sites;
}

/**
 * Adding more params to the api request if needed.
 */
function ebay_partner_network_get_custom_params() {
  $custom_params = '';
  drupal_alter('ebay_partner_network_custom_params', $custom_params);

  if(!empty($custom_params) && is_array($custom_params)) {
    $custom_params = _ebay_partner_network_tree_walk($custom_params);
  }

  return $custom_params;
}

/**
 * Recursive array walk to prepare an array for the api call.
 */
function _ebay_partner_network_tree_walk($array, $trail = '') {
  $output = '';
  foreach($array as $k=>$v) {
    if(is_array($v)) {
      foreach($v as $key=>$val) {
         $trail = $k.'('.$key.')'.'.';
         $output .= _ebay_partner_network_tree_walk($val, $trail);
         $trail = '';
      }
    }
    else {
      $output .= '&'.$trail.$k.'='.$v;
    }
  }
  return $output;
}

function ebay_partner_build_category_tree($parent_id, $params, $depth=0, $go_deeper=false) {
  //$site_id, $app_id,
  //$ids = variable_get('') //array('1249', '58058', '625');
  $categories = array();
  $url = 'http://open.api.ebay.com/Shopping?callname=GetCategoryInfo&appid=' . $params['app_id'] . '&siteid=' . $params['site_id'] . '&CategoryID=' . $parent_id . '&version=729&IncludeSelector=ChildCategories';
  $cur_depth = $depth+1;
  $cat_list = file_get_contents($url);
  $xml = simplexml_load_string($cat_list);
  if(!empty($xml->CategoryArray->Category)) {
    foreach ($xml->CategoryArray->Category as $cat) {
      if((string)$cat->CategoryLevel == $cur_depth) {
        $cat_id = (string)$cat->CategoryID;
        $categories[$cat_id] = str_repeat('-', ($cur_depth-1)*2) . (string)$cat->CategoryName;
        if(!empty($params['max_depth']) && !empty($params['ids'])) {
          if($cur_depth < $params['max_depth'] && (in_array($cat_id, $params['ids']) || $go_deeper)) {
            $rec = ebay_partner_build_category_tree($cat_id, $params, $cur_depth, true);
            if(is_array($rec) && !empty($rec)) {
              $categories = $categories + $rec;
            }
          }
        }
      }
    }
  }
  return $categories;
}

/**
 * Rebuilds the cache for the category tree.
 */
function ebay_partner_network_regenerate_ebay_category_tree() {
  $params = array();
  $site = variable_get('ebay_partner_network_store_id', 'EBAY-GB');
  $params['site_id'] = ebay_partner_network_site_ids($site);
  $params['app_id'] = variable_get('ebay_partner_network_app_id', '');
  $params['max_depth'] = variable_get('ebay_partner_network_category_depth', 0);
  $ids = variable_get('ebay_partner_network_category_ids', '');

  if(!empty($ids)) {
    $params['ids'] = explode(',', $ids);
  }

  if(!empty($params['site_id'])) {
    $categories = ebay_partner_build_category_tree('-1', $params, $depth=0);
    if($categories) {
      cache_set('ebay_partner_network:categories', $categories);
      drupal_set_message('Categories were successfully generated');
    } else {
      drupal_set_message('There was an error while trying to generate categories', 'error');
    }
  }
}
